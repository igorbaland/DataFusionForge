Two properties of nodes
    1. Depth

                    20                  root node   -> 0
            10              30          Depth 10, 30 -> 1
        6       21      4               Depth = 2
    3       8                           Depth = 3

    Another way to calculate the depth is by counting the numbers of edges from root to the target node

    2. Height
        is the opposite of depth
            leaf nodes(3, 8, 4) = 0
                left 6 & 21 = 1     right 30 = 1
                            20
                        10
                    6       21
                3       8

                We can start from 3 or 8
                    But we can also start
                        21
                        What is the longest task/ height?
                        2 , because 3 or 8 (3 moves)

    The formula for calculating the height of a note
        1 + max(height(L), height(R))

        Height is the method that calling itself recursively.
                        20
                     10
                6          21
            3       8

        Right subtree
        With a single node calculating the height is super easy, height of right is 0 (21)
                    10
                6       21      21 -> 0
          the height is 0.

        The left subtree
        We break this down into smaller problems
                6               1
            3       8           0
          the height of this subtree is 1.

    Now we compare these values (left with right, 1 and 0)
        the left subtree is larger

    What kind of traverse algorithm we have used
        Post-Order
            we start with the leafs and pass value in the tree until we get to the root node





